---
title: Aura
subtitle: Declarative component sugar for event-driven RequireJS apps
---

<div class="row">
  <% data.landing.each do |title, item| %>
    <div class="cell-4">
      <h2><i class="<%= item.icon %>"></i><%= item.title %></h2>
      <p><%= item.description %></p>
      <a href="<%= item.link %>" title="<%= item.title %>">See More <i class="icon-angle-right"></i></a>
    </div>
  <% end %>
</div>

<div class="row">
<h2>Examples</h2>


<p>Let&#39;s define the simplest possible component. We'll call it <code>cats</code>. This loads in a template <code>cats.hbs</code> used to represent some UI:</p>
<div class="highlight js "><div class="ribbon"></div><div class="scroller"><table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre>1
2
3
4
5
6
7
</pre></td>
  <td class="code"><pre>define([<span class="string"><span class="delimiter">'</span><span class="content">text!./cats.hbs</span><span class="delimiter">'</span></span>], <span class="keyword">function</span>(template) {
  <span class="keyword">return</span> {
    <span class="function">initialize</span>: <span class="keyword">function</span>() {
      <span class="local-variable">this</span>.html(template);
    }
  };
});
</pre></td>
</tr></table>
</div></div>
<p>Our component <code>cats</code> can now be included on a page using an HTML tag and the <code>data-aura-component</code> attribute:</p>
<div class="highlight html "><div class="ribbon"></div><div class="scroller"><table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre>1
</pre></td>
  <td class="code"><pre><span class="tag">&lt;div</span> <span class="attribute-name">data-aura-component</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">cats</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;/div&gt;</span>
</pre></td>
</tr></table>
</div></div>
<p>You can also pass options to your tag to configure the component via data-attributes, too:</p>
<div class="highlight html "><div class="ribbon"></div><div class="scroller"><table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre>1
2
3
4
</pre></td>
  <td class="code"><pre><span class="tag">&lt;div</span> <span class="attribute-name">data-aura-component</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">cats</span><span class="delimiter">&quot;</span></span> 
     <span class="attribute-name">data-aura-foo</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">bar</span><span class="delimiter">&quot;</span></span> 
     <span class="attribute-name">data-aura-other-option</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">hihi</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
<span class="tag">&lt;/div&gt;</span>
</pre></td>
</tr></table>
</div></div>
<p>These will then be available in your component instance as:</p>
<div class="highlight js "><div class="ribbon"></div><div class="scroller"><table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre>1
2
</pre></td>
  <td class="code"><pre><span class="local-variable">this</span>.options.foo          <span class="comment">// -&gt; bar</span>
<span class="local-variable">this</span>.options.otherOption  <span class="comment">// -&gt; hello again</span>
</pre></td>
</tr></table>
</div></div>
<p>The Aura Mediator supports global and sandboxed event messaging. These allow components to communicate with each other by subscribing, unsubscribing and emitting event notifications. Namespaces, wildcards and more are supported.</p>
 
<div class="highlight js "><div class="ribbon"></div><div class="scroller"><table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre>1
2
3
4
5
6
7
8
9
<strong>10</strong>
11
12
13
14
</pre></td>
  <td class="code"><pre>define([<span class="string"><span class="delimiter">'</span><span class="content">text!./cats.hbs</span><span class="delimiter">'</span></span>], <span class="keyword">function</span>(template) {
  <span class="keyword">return</span> {
    <span class="function">initialize</span>: <span class="keyword">function</span>() {
      <span class="local-variable">this</span>.sandbox.on(<span class="string"><span class="delimiter">'</span><span class="content">cats.update</span><span class="delimiter">'</span></span>, <span class="local-variable">this</span>.render, <span class="local-variable">this</span>);
    },
    <span class="function">render</span>: <span class="keyword">function</span>(stats) {
      <span class="local-variable">this</span>.html(template(stats || {}));
      <span class="local-variable">this</span>.<span class="predefined">$el</span>.find(<span class="string"><span class="delimiter">'</span><span class="content">button</span><span class="delimiter">'</span></span>).on(<span class="string"><span class="delimiter">'</span><span class="content">click</span><span class="delimiter">'</span></span>, _.bind(<span class="local-variable">this</span>.clearKitty, <span class="local-variable">this</span>));
    },
    <span class="function">clearKitty</span>: <span class="keyword">function</span>() {
      <span class="local-variable">this</span>.sandbox.emit(<span class="string"><span class="delimiter">'</span><span class="content">cats.clear</span><span class="delimiter">'</span></span>);
    }
  }
});
</pre></td>
</tr></table>
</div></div>

<p>Aura also comes with the awesome ability to load components on demand from different sources. Doing this:</p>
 
<div class="highlight js "><div class="ribbon"></div><div class="scroller"><table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre>1
2
3
</pre></td>
  <td class="code"><pre>aura({ 
  <span class="key">sources</span>: { <span class="keyword">default</span>: <span class="string"><span class="delimiter">'</span><span class="content">https://another.doma.in/path/to/my/components</span><span class="delimiter">'</span></span> } 
}).start();
</pre></td>
</tr></table>
</div></div>


<p>...lets us load all sorts of other components from this end-point:</p>
<div class="highlight html "><div class="ribbon"></div><div class="scroller"><table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre>1
2
3
</pre></td>
  <td class="code"><pre><span class="tag">&lt;div</span> <span class="attribute-name">data-aura-component</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">dogs</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;/div&gt;</span>
<span class="tag">&lt;div</span> <span class="attribute-name">data-aura-component</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">fish</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">data-aura-home</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">bowl</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;/div&gt;</span>
<span class="tag">&lt;div</span> <span class="attribute-name">data-aura-component</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">rabbits</span><span class="delimiter">&quot;</span></span> <span class="attribute-name">data-aura-eats</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">carrots</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span><span class="tag">&lt;/div&gt;</span>
</pre></td>
</tr></table>
</div></div>

  </div>

<div class="row">
  <div class="cell-4">
    <h2><i class="icon-wand"></i>It's framework-agnostic</h2>
    <figcaption>
      <p>Aura is built to be framework-agnostic â€” you can use it with or without your favorite JS framework.</p>
      <p>Aura works well with popular frameworks including Angular, Backbone, Ember and more&hellip;</p>
      <ul class="secret-list island">
        <li>
          <a href="//angularjs.org" title="Angular website">
            <div class="js-framework angular"></div>
          </a>
        </li>
        <li>
          <a href="//backbonejs.org" title="Backbone website">
            <div class="js-framework backbone"></div>
          </a>
        </li>
        <li>
          <a href="//emberjs.com/" title="Ember website">
            <div class="js-framework ember"></div>
          </a>
        </li>
      </ul>
    </figcaption>
  </div>
  <figure class="cell-8">
    <%= image_tag 'docs/schema.svg', :height => 'auto', :width => '100%', :alt => "Aura Architecture Diagram" %>
  </figure>
</div>

<div class="secondary-section sub-section">
  <div class="row align-center">
    <%= link_to 'Download Aura v0.9.1', '//github.com/aurajs/aura/zipball/master', :class => 'button btn small' %>
    <%= link_to 'Download Boilerplate', '//github.com/aurajs/boilerplate/tarball/master', :class => 'button btn small' %>
  </div>
</div>
